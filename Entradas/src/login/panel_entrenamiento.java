/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package login;

import controlador.Controlador;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

import org.jfree.chart.*;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;

public class panel_entrenamiento extends javax.swing.JFrame {
    Controlador controlador;
    int xMouse, yMouse;
    private static int stop = 0;
    private static final int N = 8;
    private static final int SIZE = 345;
    private static final String title = "Scatter Add Demo";
    private static final Random rand = new Random();
    public final static XYSeries series = new XYSeries("Deriva");
    public final static XYSeries added = new XYSeries("Lugares sin deriva");
    FileWriter fw;
    
    public panel_entrenamiento(Controlador vista) {
        controlador=vista;
        initComponents();
        this.setLocationRelativeTo(null);
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents() {

        BG = new javax.swing.JPanel();
        Info = new javax.swing.JPanel();
        InputXY = new javax.swing.JPanel();
        Header = new javax.swing.JPanel();
        Limpiar = new javax.swing.JButton();
        Entrenar = new javax.swing.JButton();
        Regresar = new javax.swing.JButton();
        Whiten = new javax.swing.JLabel();
        Blue = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);

        BG.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        /**javax.swing.GroupLayout InfoLayout = new javax.swing.GroupLayout(Info);
        Info.setLayout(InfoLayout);
        InfoLayout.setHorizontalGroup(
            InfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        InfoLayout.setVerticalGroup(
            InfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );**/
        
        
        ChartPanel chartPanelDerive = createDemoPanel();
        chartPanelDerive.setPreferredSize(new Dimension(SIZE, SIZE));
        BG.add(chartPanelDerive, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 350, 350));

        
        ChartPanel chartPanel = createDemoPanelDrift();
        chartPanel.setPreferredSize(new Dimension(SIZE, SIZE));
        BG.add(chartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 350, 350));

        Header.setOpaque(false);
        Header.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                HeaderMouseDragged(evt);
            }
        });
        Header.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HeaderMousePressed(evt);
            }
        });

        javax.swing.GroupLayout HeaderLayout = new javax.swing.GroupLayout(Header);
        Header.setLayout(HeaderLayout);
        HeaderLayout.setHorizontalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
        );
        HeaderLayout.setVerticalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        BG.add(Header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 50));

        Limpiar.setBackground(new java.awt.Color(0, 153, 204));
        Limpiar.setFont(new java.awt.Font("Roboto Black", 0, 18)); // NOI18N
        Limpiar.setForeground(new java.awt.Color(255, 255, 255));
        Limpiar.setText("Limpiar");
        Limpiar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Limpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });
        BG.add(Limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 120, 50));

        Entrenar.setBackground(new java.awt.Color(0, 153, 204));
        Entrenar.setFont(new java.awt.Font("Roboto Black", 0, 18)); // NOI18N
        Entrenar.setForeground(new java.awt.Color(255, 255, 255));
        Entrenar.setText("Entrenar");
        Entrenar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Entrenar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Entrenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntrenarActionPerformed(evt);
            }
        });
        BG.add(Entrenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 300, 120, 50));

        Regresar.setBackground(new java.awt.Color(0, 153, 204));
        Regresar.setFont(new java.awt.Font("Roboto Black", 0, 18)); // NOI18N
        Regresar.setForeground(new java.awt.Color(255, 255, 255));
        Regresar.setText("Regresar");
        Regresar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Regresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });
        BG.add(Regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 220, 120, 50));
        URL url5 = panel_inicial.class.getResource("/img/white.jpg");
        Whiten.setIcon(new javax.swing.ImageIcon(url5)); // NOI18N
        Whiten.setText("Whiten");
        BG.add(Whiten, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 860, 210));
        URL url6 = panel_inicial.class.getResource("/img/99.jpg");
        Blue.setIcon(new javax.swing.ImageIcon(url6)); // NOI18N
        BG.add(Blue, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 250));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        controlador.escucharEventos();
    }                                        

    private void EntrenarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        controlador.escucharEventos();
    }                                        

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        controlador.escucharEventos();
    }                                       

    private void HeaderMouseDragged(java.awt.event.MouseEvent evt) {                                    
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse , y - yMouse);
    }                                   

    private void HeaderMousePressed(java.awt.event.MouseEvent evt) {                                    
        xMouse = evt.getX();
        yMouse = evt.getY();
    }// </editor-fold>                        
private ChartPanel createDemoPanel() {
        JFreeChart jfreechart = ChartFactory.createScatterPlot(
            "", "", "", createSampleData(),
            PlotOrientation.VERTICAL, true, true, false);
        XYPlot xyPlot = (XYPlot) jfreechart.getPlot();
        xyPlot.setDomainCrosshairVisible(true);
        xyPlot.setRangeCrosshairVisible(true);
        XYItemRenderer renderer = xyPlot.getRenderer();
        renderer.setSeriesPaint(0, Color.cyan);
        adjustAxis((NumberAxis) xyPlot.getDomainAxis(), true);
        adjustAxis((NumberAxis) xyPlot.getRangeAxis(), false);
        xyPlot.setBackgroundPaint(Color.white);
        ChartPanel chartPanel = new ChartPanel(jfreechart);
        chartPanel.setRangeZoomable(false);
        chartPanel.setDomainZoomable(false);
        chartPanel.addChartMouseListener(new ChartMouseListener() {

			@Override
                        public void chartMouseClicked(ChartMouseEvent event) {
				// TODO Auto-generated method stub
				Point2D p = chartPanel.translateScreenToJava2D(event.getTrigger().getPoint());
				Rectangle2D plotArea = chartPanel.getScreenDataArea();
				JFreeChart jfreechart = ChartFactory.createScatterPlot(
			            "", "X", "Y", createSampleData(),
			            PlotOrientation.VERTICAL, true, true, false);
			        
				
				double chartX = xyPlot.getDomainAxis().java2DToValue(p.getX(), plotArea, xyPlot.getDomainAxisEdge());
				double chartY = xyPlot.getRangeAxis().java2DToValue(p.getY(), plotArea, xyPlot.getRangeAxisEdge());
				
				try {  
					fw = new FileWriter("iris.arff",true);
					fw.write(chartX+","+chartY+","+"SI\n");
					fw.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				series.add(chartX,chartY);
				System.out.println(chartX + " " +chartY);
				
			}

			//@Override
			public void chartMouseMoved(ChartMouseEvent event) {
				// TODO Auto-generated method stub
				
			}
        	
        });
        return chartPanel;
    }


 private ChartPanel createDemoPanelDrift() {
        JFreeChart jfreechart = ChartFactory.createScatterPlot(
            "", "", "", createSampleDataDrift(),
            PlotOrientation.VERTICAL, true, true, false);
        XYPlot xyPlot = (XYPlot) jfreechart.getPlot();
        xyPlot.setDomainCrosshairVisible(true);
        xyPlot.setRangeCrosshairVisible(true);
        XYItemRenderer renderer = xyPlot.getRenderer();
        renderer.setSeriesPaint(0, Color.blue);
        adjustAxis((NumberAxis) xyPlot.getDomainAxis(), true);
        adjustAxis((NumberAxis) xyPlot.getRangeAxis(), false);
        xyPlot.setBackgroundPaint(Color.white);
        ChartPanel chartPanel = new ChartPanel(jfreechart);
        chartPanel.setRangeZoomable(false);
        chartPanel.setDomainZoomable(false);
        chartPanel.addChartMouseListener(new ChartMouseListener() {

			@Override
			public void chartMouseClicked(ChartMouseEvent event) {
				// TODO Auto-generated method stub
				Point2D p = chartPanel.translateScreenToJava2D(event.getTrigger().getPoint());
				Rectangle2D plotArea = chartPanel.getScreenDataArea();
				JFreeChart jfreechart = ChartFactory.createScatterPlot(
			            title, "X", "Y", createSampleDataDrift(),
			            PlotOrientation.VERTICAL, true, true, false);
			        
				
				double chartX = xyPlot.getDomainAxis().java2DToValue(p.getX(), plotArea, xyPlot.getDomainAxisEdge());
				double chartY = xyPlot.getRangeAxis().java2DToValue(p.getY(), plotArea, xyPlot.getRangeAxisEdge());
				
				try {
					fw = new FileWriter("iris.arff",true);
					fw.write(chartX+","+chartY+","+"NO\n");
					fw.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				added.add(chartX,chartY);
				System.out.println(chartX + " " +chartY);
				
			}

			@Override
			public void chartMouseMoved(ChartMouseEvent event) {
				// TODO Auto-generated method stub
				
			}
        	
        });
        return chartPanel;
    }
    private void adjustAxis(NumberAxis axis, boolean vertical) {
        axis.setRange(-1.0, 1.0);
        axis.setTickUnit(new NumberTickUnit(0.1));
        axis.setVerticalTickLabels(vertical);
    }

    private XYDataset createSampleData() {
        XYSeriesCollection xySeriesCollection = new XYSeriesCollection();
        
        xySeriesCollection.addSeries(series);
        return xySeriesCollection;
    }
    private XYDataset createSampleDataDrift() {
        XYSeriesCollection xySeriesCollection = new XYSeriesCollection();
        
        xySeriesCollection.addSeries(added);
        return xySeriesCollection;
    }
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify                     
    private javax.swing.JPanel BG;
    private javax.swing.JLabel Blue;
    public static javax.swing.JButton Entrenar;
    private javax.swing.JPanel Header;
    private javax.swing.JPanel Info;
    private javax.swing.JPanel InputXY;
    public static javax.swing.JButton Limpiar;
    public static javax.swing.JButton Regresar;
    private javax.swing.JLabel Whiten;
    // End of variables declaration                   
}